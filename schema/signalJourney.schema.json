{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://raw.githubusercontent.com/signal-journey/specification/main/schema/signalJourney.schema.json",
  "title": "Signal Journey Schema",
  "description": "Schema for documenting signal processing pipelines with detailed provenance tracking. Files should follow the naming convention: sub-<participant>_task-<taskname>_signalJourney.json and use UTF-8 encoding. Uses namespaces (e.g., 'eeg:', 'nemar:') within the 'extensions' property for domain-specific fields.",
  "type": "object",
  "required": [
    "sj_version",
    "schema_version",
    "description",
    "pipelineInfo",
    "processingSteps"
  ],
  "properties": {
    "sj_version": {
      "type": "string",
      "description": "Version of the signalJourney specification being followed (Semantic Versioning MAJOR.MINOR.PATCH)",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$"
    },
    "schema_version": {
      "type": "string",
      "description": "Version of this schema file (Semantic Versioning MAJOR.MINOR.PATCH)",
      "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$"
    },
    "description": {
      "type": "string",
      "description": "A brief human-readable description of the processing pipeline documented in this file."
    },
    "versionHistory": {
      "type": "array",
      "description": "Tracks changes made to this schema file over time.",
      "items": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "The schema version for this entry.",
            "pattern": "^[0-9]+\\.[0-9]+\\.[0-9]+$"
          },
          "date": {
            "type": "string",
            "description": "The release date of this schema version.",
            "format": "date"
          },
          "changes": {
            "type": "string",
            "description": "A summary of changes introduced in this version."
          }
        },
        "required": ["version", "date", "changes"]
      },
      "default": [
        {
          "version": "0.1.0",
          "date": "2024-05-03", // Update on release
          "changes": "Initial schema structure definition."
        }
      ]
    },
    "pipelineInfo": {
      "type": "object",
      "description": "General pipeline information (e.g., project name, dataset details). Specific fields TBD, allows additional properties for now.",
      "additionalProperties": true,
      "properties": {} // Define structure later
    },
    "processingSteps": {
      "type": "array",
      "description": "An ordered list of processing steps performed. Defined in #/definitions/processingStep",
      "items": {
        "$ref": "#/definitions/processingStep"
      },
      "minItems": 1
    },
    "summaryMetrics": {
      "type": "object",
      "description": "Optional section for summary statistics or overall quality metrics applicable to the entire pipeline. Defined in #/definitions/qualityMetricsObject.",
      "$ref": "#/definitions/qualityMetricsObject"
    },
    "extensions": {
      "type": "object",
      "description": "Container for domain-specific extensions using namespaces. Add custom fields under the appropriate namespace (e.g., extensions.eeg.channelNoise).",
      "properties": {
        "eeg": {
          "type": "object",
          "description": "Namespace for EEG-specific properties.",
          "additionalProperties": true // Allow any EEG-specific fields initially
        },
        "nemar": {
          "type": "object",
          "description": "Namespace for NEMAR-specific properties (e.g., pipeline IDs).",
          "additionalProperties": true // Allow any NEMAR-specific fields initially
        }
        // Add other namespaces here as needed
      },
      "additionalProperties": true // Allow adding new top-level namespaces
    }
  },
  "additionalProperties": false,

  "definitions": {
    "processingStep": {
      "type": "object",
      "description": "Defines a single step in the processing pipeline.",
      "properties": {
        "stepId": {
          "type": "string",
          "description": "Unique identifier for this step within the pipeline (e.g., 'step-1', 'ica-run').",
          "pattern": "^[a-zA-Z0-9_-]+$"
        },
        "name": {
          "type": "string",
          "description": "Short, human-readable name for the step (e.g., 'High-pass Filter', 'ICA Decomposition')."
        },
        "description": {
          "type": "string",
          "description": "Detailed description of the step's purpose and actions."
        },
        "software": {
          "description": "Details of the software used to perform this step.",
          "$ref": "#/definitions/softwareDetails"
        },
        "parameters": {
          "type": "array",
          "description": "List of parameters used in this step.",
          "items": {
            "$ref": "#/definitions/parameter"
          }
        },
        "inputSources": {
          "type": "array",
          "description": "Identifies the input data sources for this step (e.g., previous stepId, file path).",
          "items": {"type": "string"}
        },
        "outputTargets": {
          "type": "array",
          "description": "Identifies the outputs generated by this step (e.g., derived file path, variable name).",
          "items": {"type": "string"}
        },
        "dependsOn": {
          "type": "array",
          "description": "List of stepIds that must be completed before this step can execute.",
          "items": {"type": "string"}
        },
        "qualityMetrics": {
          "description": "Optional object containing quality metrics specific to this step. Defined in #/definitions/qualityMetricsObject.",
          "$ref": "#/definitions/qualityMetricsObject"
        }
      },
      "required": ["stepId", "name", "description", "software"]
    },
    "qualityMetricsObject": {
      "type": "object",
      "description": "A container for quality metrics. Keys are metric names (potentially namespaced, e.g., 'eeg:percentBadChannels'). Values can be simple types or objects containing fields like 'value', 'unit', 'threshold'.",
      "additionalProperties": true // Allows any metric key-value pairs
    },
    "softwareDetails": {
      "type": "object",
      "description": "Reusable definition for software details.",
      "properties": {
        "name": {"type": "string"},
        "version": {"type": "string"},
        "url": {"type": "string", "format": "uri"}
      },
      "required": ["name", "version"]
    },
    "parameter": {
      "type": "object",
      "description": "Reusable definition for a parameter.",
      "properties": {
        "name": {"type": "string"},
        "value": {},
        "description": {"type": "string"},
        "unit": {"type": "string"},
        "dataType": {
          "type": "string",
          "description": "Optional JSON schema type hint for the value (e.g., 'number', 'string', 'boolean', 'array', 'object'). Aids validation.",
          "enum": ["string", "number", "integer", "boolean", "array", "object", "null"]
        }
      },
      "required": ["name", "value"]
    }
  }
} 